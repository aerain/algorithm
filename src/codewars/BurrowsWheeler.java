package codewars;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class BurrowsWheeler {

    public static BWT encode(String s) {
        String temp = s;
        // Your code here!
        String[] matrix = new String[s.length()];
        matrix[0] = temp;
        for(int i = 1; i < matrix.length; i++) {
            temp = temp.substring(1) + temp.substring(0, 1);
            matrix[i] = temp;
        }
        Arrays.sort(matrix);
        for(String mat: matrix) System.out.println(mat);
        StringBuilder sb = new StringBuilder();
        for(String mat: matrix) sb.append(mat.charAt(matrix.length - 1));
        return new BWT(sb.toString(), Arrays.binarySearch(matrix, s));          // new BWT("stuff", -1);
    }

    public static String decode(String s, int n) {
        // Your code here!
        char[][] matrix = new char[s.length()][s.length()];
        char[] sCh = s.toCharArray();
        for(int i = 0; i < matrix.length; i++) matrix[i][matrix.length - 1] = sCh[i];
        Arrays.sort(sCh);
        for(int i = 0; i < matrix.length; i++) matrix[i][0] = sCh[i];

        boolean needContinue = true;
        while(needContinue) {




            needContinue = false;
            for(char ch: matrix[n]) {
                if(ch == '\0') {
                    needContinue = true;
                    break;
                }
            }
        }
        /*

        ? ? ? b a b a r

        a ? ? ? ? ? ? ? n checked
        a ? ? ? ? ? ? ? n
        a ? ? ? ? ? ? ? b checked
        a ? ? ? ? ? ? ? b
        b a n a n ? ? ? r <- 4 checked
        b ? ? ? ? ? ? ? a
        n ? ? ? ? ? ? ? a
        n ? ? ? ? ? ? ? a checked
        r ? ? ? ? ? ? ? a


         */

        /*
          ? ? ? ? ? ? ? ? ? ? ? e checked
        B ? ? ? ? ? ? ? ? ? ? ?   checked
        H u m b l e   B u n d l e <- here
        b ? ? ? ? ? ? ? ? ? ? ? m checked
        d ? ? ? ? ? ? ? ? ? ? ? n checked
        e ? ? ? ? ? ? ? ? ? ? ? l checked
        e ? ? ? ? ? ? ? ? ? ? ? l checked
        l ? ? ? ? ? ? ? ? ? ? ? b checked
        l ? ? ? ? ? ? ? ? ? ? ? d checked
        m ? ? ? ? ? ? ? ? ? ? ? u checked
        n ? ? ? ? ? ? ? ? ? ? ? u checked
        u ? ? ? ? ? ? ? ? ? ? ? H checked
        u ? ? ? ? ? ? ? ? ? ? ? B checked
         */

        /*
          ? ? ? ? ? ? ? ? ? ? ? e
        B ? ? ? ? ? ? ? ? ? ? ?
        H ? ? ? ? ? ? ? ? ? ? ? e <- here
        b ? ? ? ? ? ? ? ? ? ? ? n
        d ? ? ? ? ? ? ? ? ? ? ? m
        e ? ? ? ? ? ? ? ? ? ? ? l
        e ? ? ? ? ? ? ? ? ? ? ? l
        l ? ? ? ? ? ? ? ? ? ? ? b
        l ? ? ? ? ? ? ? ? ? ? ? d
        m ? ? ? ? ? ? ? ? ? ? ? u
        n ? ? ? ? ? ? ? ? ? ? ? u
        u ? ? ? ? ? ? ? ? ? ? ? B
        u ? ? ? ? ? ? ? ? ? ? ? H
         */
        return null;
    }
}

class BWT {

    public String s;
    public int n;

    public BWT(String s, int n) {
        this.s = s;
        this.n = n;
    }

    @Override public String  toString() { return s + ", " + n; }
    @Override public boolean equals(Object o) { return true; }
    @Override public int     hashCode() { return 1; }
}

